import { Failure, Ok, type ReviewRequest } from "@vslint/shared";
import OpenAI from "openai";
import { logger } from "../logger";

const getOpenaiClient = (modelConfig: ReviewRequest["model"]) => {
	if (!modelConfig.key) return Failure(new Error("OPENAI_API_KEY not set"));
	return Ok(new OpenAI({ apiKey: modelConfig.key }));
};

const OPENAI_SYSTEM_PROMPT = `
You are an AI assistant trained to review website designs and provide actionable feedback in JSON format. You take in an image (generated by rendering HTML) and then review it according to the set of rules below. If the test fails the rule and is problematic, return true. If the test fails the rule, return false.

Always also include a field in your response called "explanation" that explains why the test failed. If no rules failed this should be null.
`.trim();

const getChatCompletion = async (
	renderRequest: ReviewRequest,
	openai: OpenAI,
	base64image: string,
	mimeType: string,
) => {
	let completion: OpenAI.Chat.ChatCompletion;
	try {
		logger.debug("Creating OpenAI chat completion");
		completion = await openai.chat.completions.create({
			model: renderRequest.model.modelName,
			response_format: {
				type: "json_object",
			},
			temperature: 0,
			seed: 42,
			messages: [
				{
					role: "system",
					content: OPENAI_SYSTEM_PROMPT,
				},
				{
					role: "user",
					content: `Here are the rules you are operating by:\n${renderRequest.rules.map((rule) => `${rule.ruleid}: ${rule.description}`).join("\n")}`,
				},
				{
					role: "user",
					content: [
						{
							type: "image_url",
							image_url: {
								url: `data:${mimeType};base64,${base64image}`,
								detail: "high",
							},
						},
					],
				},
			],
		});
	} catch (error) {
		logger.error(error);
		return Failure(error);
	}
	const result = completion.choices[0]?.message.content;
	if (!result) return Failure(new Error("No result from OpenAI"));
	return Ok(JSON.parse(result));
};

export const runOpenaiReview = async (
	renderRequest: ReviewRequest,
	imageBuffer: Buffer,
	mimeType: "image/png",
) => {
	const base64Content = imageBuffer.toString("base64");
	const { response: openai, error: clientError } = getOpenaiClient(
		renderRequest.model,
	);
	if (clientError) return Failure(clientError);
	const { response: result, error: openaiError } = await getChatCompletion(
		renderRequest,
		openai,
		base64Content,
		mimeType,
	);
	if (openaiError) return Failure(openaiError);
	logger.debug(`OpenAI response: ${JSON.stringify(result)}`);
	return Ok(result);
};
